#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('dockit-demo:server');
var http = require('http');
const request = require('request')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

server.get('/api/inspektlab-url', (req, res) => {
  const fakeCaseId = () => Math.random().toString(16)
  const requestBody = () => ({
    // eslint-disable-next-line max-len
    'apiKey': '63ba67bf989fb8860251a70f1458b7a4338155a69a68f0e3b41fd3c6d52ad3fe901b8c100472f2b048e6efd5ec30307801f56814bcefb297fc96469b1e600dea',
    'caseId': fakeCaseId(),
  })

  const requestOptions = {
    url: 'https://urlgen.inspektlabs.com/newToken',
    method: 'POST',
    json: requestBody(),
  };
  request(requestOptions, (err, response, body) => {
    if (err) {
      console.log(err);
    } else if (response.statusCode === 200) {
      res.send(body)
      console.log(body);
    } else {
      console.log(response.statusCode);
    }
  });
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
